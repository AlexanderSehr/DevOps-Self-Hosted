parameters:
  - name: environment
    default:
  - name: deploymentsToPerform
    default:
  - name: serviceConnection
    default:
  - name: waitForscalesetBuild
    default:
  - name: setAgentPool
    default:

jobs:
  - deployment: deploy_job
    displayName: Deploy Resources
    environment: ${{ parameters.environment }}
    timeoutInMinutes: 120
    pool:
      vmImage: '$(vmImage_${{ parameters.environment }})'
      name: '$(poolName_${{ parameters.environment }})'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            # [Agent] Prepare environment
            #----------------------------
            - task: PowerShell@2
              displayName: 'Setup agent'
              inputs:
                targetType: inline
                pwsh: true
                script: |
                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' 'sharedScripts' 'agent' 'Set-EnvironmentOnAgent.ps1')

                  # Define PS modules to install on the runner
                  $Modules = @(
                      @{ Name = 'Az.Accounts' },
                      @{ Name = 'Az.Resources' },
                      @{ Name = 'Az.Compute' }
                  )

                  # Set agent up
                  Set-EnvironmentOnAgent -PSModules $Modules
            # [Deployment] task(s)
            #---------------------
            - task: AzureCLI@2
              displayName: 'Deploy [scaleset.deploy.bicep] via service connection [$(serviceConnection_${{ parameters.environment }})]'
              condition: |
                and(
                  succeeded(),
                  in('${{ parameters.deploymentsToPerform }}', 'All', 'Only Scale Set')
                )
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Log into Az-PowerShell context
                  $SecuredPassword = ConvertTo-SecureString -AsPlainText -String $env:servicePrincipalKey
                  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:servicePrincipalId, $SecuredPassword
                  Connect-AzAccount -ServicePrincipal -TenantId $env:tenantId -Credential $Credential

                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'New-TemplateDeployment.ps1')
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'Test-TemplateDeployment.ps1')

                  # ----------------- #
                  # INVOKE DEPLOYMENT #
                  # ----------------- #
                  $functionInput = @{
                    templateFilePath  = Join-Path '$(parametersPath)' '${{ parameters.environment }}.scaleset.parameters.bicep'
                    location          = '$(location)'
                    subscriptionId    = (Get-AzContext).Subscription.Id
                  }

                  # Inject control parmaeters from pipeline
                  $functionInput['additionalParameters'] = @{
                    deploymentsToPerform = '${{ parameters.deploymentsToPerform }}'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  # Validate deployment
                  Test-TemplateDeployment @functionInput

                  # Invoke deployment
                  New-TemplateDeployment @functionInput -Verbose
            # [Azure DevOps] task(s)
            #-----------------------
            - task: AzureCLI@2
              displayName: 'Register scale set'
              condition: |
                and(
                  succeeded(),
                  eq('${{ parameters.setAgentPool }}', 'true')
                )
              inputs:
                addSpnToEnvironment: true
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  # Log into Az-PowerShell context
                  $SecuredPassword = ConvertTo-SecureString -AsPlainText -String $env:servicePrincipalKey
                  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:servicePrincipalId, $SecuredPassword
                  Connect-AzAccount -ServicePrincipal -TenantId $env:tenantId -Credential $Credential

                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'registerAgentPool' 'Sync-ElasticPool.ps1')

                  # Get scale set properties
                  $templateFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.scaleset.parameters.bicep'
                  $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable

                  # Get agent  pool properties
                  $agentsParameterFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.agentpool.parameters.json'
                  $agentPoolParameterFileContent = ConvertFrom-Json (Get-Content $agentsParameterFilePath -Raw) -AsHashTable

                  $functionInput = @{
                    PAT                   = '$(System.AccessToken)'
                    Organization          = $agentPoolParameterFileContent.Organization
                    Project               = $agentPoolParameterFileContent.Project
                    ServiceConnectionName = $agentPoolParameterFileContent.ServiceConnectionName
                    VMSSName              = $templateContent.variables.vmssParam.name
                    VMSSResourceGroupName = $templateContent.variables.rgParam.name
                    AgentPoolProperties   = $agentPoolParameterFileContent.AgentPoolProperties
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Sync-ElasticPool @functionInput
