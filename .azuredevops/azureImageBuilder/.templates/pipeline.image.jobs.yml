parameters:
  - name: environment
    default:
  - name: deploymentsToPerform
    default:
  - name: waitForImageBuild
    default:
  - name: removeImageTemplateResources
    default: true

jobs:
  - deployment: cleanup_job
    displayName: Remove previous Image Template resources
    environment: ${{ parameters.environment }}
    timeoutInMinutes: 120
    condition: |
      and(
        succeeded(),
        eq('${{ parameters.removeImageTemplateResources }}', 'true')
      )
    pool:
      vmImage: '$(vmImage_${{ parameters.environment }})'
      name: '$(poolName_${{ parameters.environment }})'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Remove previous image template resources'
              name: Remove_ImageTemplates_Task
              inputs:
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  .  (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'image' 'Remove-ImageTemplate.ps1')

                  $parameterFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.imageTemplate.parameters.json'
                  $parameters = (ConvertFrom-Json (Get-Content -Path $parameterFilePath -Raw)).parameters

                  $functionInput = @{
                    resourcegroupName = $parameters.rgParam.value.name
                    imageTemplateName =  $parameters.itParam.value.name
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Remove-ImageTemplate @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
  - deployment: deploy_job
    displayName: Deploy Resources
    dependsOn:
      - cleanup_job
    environment: ${{ parameters.environment }}
    condition: in('${{ parameters.deploymentsToPerform }}', 'All', 'Only infrastructure', 'Only storage & image', 'Only image', '')
    timeoutInMinutes: 120
    pool:
      vmImage: '$(vmImage_${{ parameters.environment }})'
      name: '$(poolName_${{ parameters.environment }})'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Deploy [imageInfra.deploy.bicep] via service connection [$(serviceConnection_${{ parameters.environment }})]'
              condition: |
                and(
                  succeeded(),
                  in('${{ parameters.deploymentsToPerform }}', 'All', 'Only infrastructure', 'Only storage & image')
                )
              inputs:
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                ScriptType: InlineScript
                inline: |
                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'New-TemplateDeployment.ps1')
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'Test-TemplateDeployment')

                  # ----------------- #
                  # INVOKE DEPLOYMENT #
                  # ----------------- #
                  $functionInput = @{
                    templateFilePath  = Join-Path '$(templatesPath)' 'imageInfra.deploy.bicep'
                    parameterFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.imageInfra.parameters.json'
                    location          = '$(location)'
                    subscriptionId    = (Get-AzContext).Subscription.Id
                  }

                  # Inject control parmaeters from pipeline
                  $functionInput['additionalParameters'] = @{
                    deploymentsToPerform = '${{ parameters.deploymentsToPerform }}'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  # Validate deployment
                  Test-TemplateDeployment @functionInput

                  # Invoke deployment
                  New-TemplateDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion

            - task: AzurePowerShell@4
              displayName: 'Trigger Storage Account post-deployment'
              condition: |
                and(
                  succeeded(),
                  in('${{ parameters.deploymentsToPerform }}', 'All', 'Only infrastructure', 'Only storage & image')
                )
              inputs:
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'storage' 'Invoke-StorageAccountPostDeployment.ps1')

                  $parameterFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.imageInfra.parameters.json'
                  $parameters = (ConvertFrom-Json (Get-Content -Path $parameterFilePath -Raw)).parameters

                  $functionInput = @{
                    storageAccountName = $parameters.saParam.value.name
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Invoke-StorageAccountPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion

            - task: AzurePowerShell@4
              displayName: 'Deploy [imageTemplate.deploy.bicep] via service connection [$(serviceConnection_${{ parameters.environment }})]'
              condition: |
                and(
                  succeeded(),
                  in('${{ parameters.deploymentsToPerform }}', 'All', 'Only storage & image', 'Only image')
                )
              inputs:
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                ScriptType: InlineScript
                inline: |
                  # Load used functions
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'New-TemplateDeployment.ps1')
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(sharedOrchestrationFunctionsPath)' 'deployment' 'Test-TemplateDeployment')
                  . (Join-Path '$(System.DefaultWorkingDirectory)' '$(orchestrationFunctionsPath)' 'storage' 'Set-SasKeysInFile.ps1')

                  # ----------------- #
                  # INVOKE DEPLOYMENT #
                  # ----------------- #
                  $parameterFilePath  = Join-Path '$(parametersPath)' '${{ parameters.environment }}.imageTemplate.parameters.json'
                  $functionInput = @{
                    templateFilePath  = Join-Path '$(templatesPath)' 'imageTemplate.deploy.bicep'
                    parameterFilePath = $parameterFilePath
                    location          = '$(location)'
                    subscriptionId    = (Get-AzContext).Subscription.Id
                  }

                  # Inject control parmaeters from pipeline
                  $functionInput['additionalParameters'] = @{
                    deploymentsToPerform = '${{ parameters.deploymentsToPerform }}'
                  }

                  # Set SAS keys for storage references
                  Set-SasKeysInFile -filePath $parameterFilePath -Verbose

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  # Validate deployment
                  Test-TemplateDeployment @functionInput

                  # Invoke deployment
                  $res = New-TemplateDeployment @functionInput -Verbose

                  Write-Verbose ($res | ConvertTo-Json | Out-String) -Verbose

                  foreach ($outputKey in $res.deploymentOutput.Keys) {
                    Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
                  }
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion

            - task: AzurePowerShell@4
              displayName: 'Wait for image build'
              condition: |
                and(
                  succeeded(),
                  eq('${{ parameters.waitForImageBuild }}', 'true'),
                  in('${{ parameters.deploymentsToPerform }}', 'All', 'Only infrastructure', 'Only storage & image', 'Only image')
                )
              name: PostDeploy_ImageTemplates_Task
              inputs:
                azureSubscription: '$(serviceConnection_${{ parameters.environment }})'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/image/Wait-ForImageBuild.ps1'

                  $parameterFilePath = Join-Path '$(parametersPath)' '${{ parameters.environment }}.imageTemplate.parameters.json'
                  $parameters = (ConvertFrom-Json (Get-Content -Path $parameterFilePath -Raw)).parameters

                  $functionInput = @{
                    ResourceGroupName = $parameters.rgParam.value.name
                    ImageTemplateName = $env:IMAGETEMPATENAME # template deployment output
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

                  Wait-ForImageBuild @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
